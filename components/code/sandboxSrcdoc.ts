let sandboxSrcdoc =
  "<!doctype html>\r\n<html>\r\n  <head>\r\n    <style>\r\n      body {\r\n        width: 100%;\r\n        height: 100%;\r\n      }\r\n    </style>\r\n  </head>\r\n  <script>\r\n    function stringify(x, quote = false) {\r\n      // primitive + function\r\n      switch (typeof x) {\r\n        case 'number':\r\n        case 'boolean':\r\n          return x.toString();\r\n        case 'bigint':\r\n          return x.toString() + 'n';\r\n        case 'string':\r\n          // \uB450 \uBC88 stringify\uD574 escape\uB418\uB294 \uAC83 \uBC29\uC9C0\r\n          return quote ? `'${x}'` : x;\r\n        case 'undefined':\r\n          return 'undefined';\r\n        case 'symbol':\r\n          return `Symbol(${x.description})`;\r\n        case 'function':\r\n          return `[Function: ${x.name}]`;\r\n      }\r\n\r\n      // null\r\n      if (x === null) return 'null';\r\n\r\n      // \uC804\uC5ED \uAC1D\uCCB4 stringify\uC2DC \uC5D0\uB7EC \uC6B0\uD68C\r\n      if (x === globalThis) return 'Window {...}';\r\n\r\n      // \uB798\uD37C \uAC1D\uCCB4\r\n      for (let wrapper of [Number, Boolean, BigInt, String])\r\n        if (x instanceof wrapper) return `[${wrapper.name}: ${x.toString()}]`;\r\n\r\n      // \uBC30\uC5F4\r\n      // \uD76C\uC18C \uBC30\uC5F4 \uCC98\uB9AC\uB294 map \uB355\uBD84\uC5D0 \uC790\uC5F0\uC2A4\uB7FD\uAC8C \uB41C\uB2E4.\r\n      // \uC989 stringify\uAC00 \uD638\uCD9C\uB418\uC9C0 \uC54A\uC9C0\uB9CC join\uC5D0 empty item\uC774 \uBC18\uC601\uB41C\uB2E4.\r\n      if (x instanceof Array)\r\n        return `[${x.map((x) => stringify(x, true)).join(', ')}]`;\r\n\r\n      // Date\r\n      if (x instanceof Date) return x.toLocaleString();\r\n\r\n      // \uC77C\uBC18 \uAC1D\uCCB4\r\n      let name = x.constructor.name;\r\n\r\n      let content = '{ ';\r\n      for (let [key, value] of Object.entries(x)) {\r\n        content += `${stringify(key)}: ${stringify(value, true)}, `;\r\n      }\r\n      content = content.length === 2 ? '{}' : content.slice(0, -2) + ' }';\r\n\r\n      if (name === 'Object') {\r\n        return content;\r\n      } else {\r\n        return `${name} ${content}`;\r\n      }\r\n    }\r\n\r\n    let runCode = (code, log) => {\r\n      console.log = log;\r\n      // MEMO: \uC544\uB798\uC640 \uAC19\uC774 js \uC608\uC81C \uCF54\uB4DC \uC911 \uC804\uC5ED\uC5D0\uC11C \uB3D9\uC791\uD574\uC57C\uD558\uB294 \uAC83\uC774 \uC788\uC5B4 Function\uC744 \uC0AC\uC6A9\uD560 \uC218 \uC5C6\uB2E4.\r\n      // ```js\r\n      // var a = 1;\r\n      // let b = 1;\r\n      // console.log(globalThis.a, globalThis.b);\r\n      // ```\r\n      (0, eval)(code);\r\n\r\n      // MEMO: setTimeout\uB4F1\uC73C\uB85C \uCF54\uB4DC\uAC00 \uC2E4\uD589\uC911\uC77C \uC218 \uC788\uC5B4\uC11C console.log\uB97C \uB418\uB3CC\uB9AC\uBA74 \uC548\uB41C\uB2E4.\r\n    };\r\n\r\n    let messageHandler = (e) => {\r\n      let postMessage = (data) => e.source.postMessage(data, '*');\r\n\r\n      let log = (...data) => {\r\n        postMessage({\r\n          type: 'log',\r\n          data: data.map((x) => stringify(x)).join(' '),\r\n        });\r\n      };\r\n\r\n      try {\r\n        let { type, code } = e.data;\r\n        switch (type) {\r\n          case 'html':\r\n            let script = code.match(/<script[\\s\\S]*?>[\\s\\S]*?<\\/script>/gi);\r\n            document.querySelector('body').innerHTML = code;\r\n            if (script && script.length) {\r\n              runCode(script[0].slice(8, -9), log);\r\n            }\r\n            break;\r\n          case 'js':\r\n            runCode(code, log);\r\n            break;\r\n        }\r\n      } catch (e) {\r\n        postMessage({ type: 'exception', data: `\uC5D0\uB7EC: ${e.message}` });\r\n      }\r\n    };\r\n\r\n    window.addEventListener('message', messageHandler);\r\n\r\n    // \uC7A1\uD788\uC9C0 \uC54A\uC740 \uC5D0\uB7EC\uAC00 \uCF58\uC194\uC5D0 \uB728\uC9C0 \uC54A\uB3C4\uB85D \uD569\uB2C8\uB2E4.\r\n    window.addEventListener('error', (e) => {\r\n      e.preventDefault();\r\n    });\r\n\r\n    window.addEventListener('unhandledrejection', (e) => {\r\n      e.preventDefault();\r\n    });\r\n  </script>\r\n  <body></body>\r\n</html>\r\n";

export default sandboxSrcdoc;
